" -----------------------------------------------------------------------------
" => XDG support
" https://jorengarenar.github.io/blog/vim-xdg
" -----------------------------------------------------------------------------
if empty($MYVIMRC) | let $MYVIMRC = expand('<sfile>:p') | endif

if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME  = $HOME."/.cache"       | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.config"      | endif
if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME   = $HOME."/.local/share" | endif
if empty($XDG_STATE_HOME)  | let $XDG_STATE_HOME  = $HOME."/.local/state" | endif

set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_DATA_HOME."/vim/spell", 'p', 0700)

set backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p', 0700)
set directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p', 0700)
set undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p', 0700)
set viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p', 0700)
set yankring_history_dir=$XDG_STATE_HOME/vim/yankring | call mkdir(&yankring_history_dir, 'p', 0700)

" Neovim has its own special location
if !has('nvim')
  set viminfofile=$XDG_STATE_HOME/vim/viminfo
endif
" set runtimepath+=~/.config/vim,~/.config/vim/after


" You want Vim, not vi. When Vim finds a vimrc, 'nocompatible' is set anyway.
" (bool: default on, off when a vimrc or gvimrc is found)
" make vim more or less vi compatible 
set nocompatible

let $LANG='en'
set langmenu=en
set encoding=utf-8
set fileformat=unix

" -----------------------------------------------------------------------------
" => vim-plug
" Install - :PlugInstall
" Cleanup - :PlugClean!
" -----------------------------------------------------------------------------
call plug#begin('~/.config/vim/plugged')

" Align your = etc.
Plug 'junegunn/vim-easy-align'
" Distraction free writing by removing UI elements and centering everything.
Plug 'junegunn/goyo.vim'

Plug 'morhetz/gruvbox'
Plug 'sainnhe/everforest'
Plug 'NLKNguyen/papercolor-theme'
Plug 'sigmavim/kyotonight'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'ghifarit53/tokyonight-vim'
Plug 'phanviet/vim-monokai-pro'
Plug 'patstockwell/vim-monokai-tasty'
Plug 'mhartington/oceanic-next'
Plug 'drewtempelmeyer/palenight.vim'

Plug 'mg979/vim-visual-multi'
Plug 'editorconfig/editorconfig-vim'
Plug 'airblade/vim-gitgutter'
Plug 'w0rp/ale'
Plug 'sheerun/vim-polyglot'
" A git wrapper.
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
" Handle surround chars like ''
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
" Toggle comments in various ways.
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-flagship'
" Automatically set 'shiftwidth' + 'expandtab' (indention) based on file type.
Plug 'tpope/vim-sleuth'
" Helpers for moving and manipulating files / directories.
Plug 'tpope/vim-eunuch'
" Plug 'tpope/vim-sensible'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-characterize'
" A number of useful motions for the quickfix list, pasting and more.
Plug 'tpope/vim-unimpaired'

Plug 'machakann/vim-highlightedyank'
Plug 'chrisbra/colorizer'
Plug 'matze/vim-move'
Plug 'valloric/matchtagalways'
Plug 'alvan/vim-closetag'
Plug 'raimondi/delimitmate'
" Plug 'justinmk/vim-sneak'
Plug 'easymotion/vim-easymotion'
    " A fancy start screen, shows MRU etc.
Plug 'mhinz/vim-startify'
" Show git file changes in the gutter.
Plug 'mhinz/vim-signify'
Plug 'prettier/vim-prettier'
" Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Plug 'vim-autoformat/vim-autoformat'
Plug 'ryanoasis/vim-devicons'
Plug 'itchyny/lightline.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'mbbill/undotree'
Plug 'ervandew/supertab'
Plug 'vim-scripts/YankRing.vim'

" Briefly highlight which text was yanked.
Plug 'machakann/vim-highlightedyank'
" Handle multi-file find and replace.
Plug 'mhinz/vim-grepper'

" Languages and file types.
Plug 'cakebaker/scss-syntax.vim'
Plug 'chrisbra/csv.vim'
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'stephpy/vim-yaml'
Plug 'tpope/vim-git'
Plug 'tpope/vim-markdown'
Plug 'cespare/vim-toml', { 'branch': 'main' }
Plug 'fatih/vim-go'
Plug 'tpope/vim-rails'
Plug 'vim-python/python-syntax'
Plug 'vim-ruby/vim-ruby'

" NERD tree will be loaded on the first invocation of NERDTreeToggle command
" Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
" If installed using Homebrew on Apple Silicon
" Plug '/opt/homebrew/opt/fzf'
" If installed using Homebrew on Apple Silicon
" set rtp+=/opt/homebrew/opt/fzf

" add plugins to &runtimepath
call plug#end()


" -----------------------------------------------------------------------------
" => options
" -----------------------------------------------------------------------------
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let maplocalleader = "\\"
" let mapleader=" "
" let maplocalleader=" "

" enable loading the plugin files for specific file types with
filetype plugin on
" enable loading the indent file for specific file types with
filetype indent on
" (string: default empty) Enable syntax highlighting.
syntax on

" (bool: default off) Show the filename in the window titlebar
set title
" (bool: default on) Improves smoothness of redrawing
set ttyfast
" (bool: default off) Don't redraw while executing macros etc.
set lazyredraw

" (bool: default off) reload file when changed outside of vim
set autoread
" (bool: default off) write file if modified on various events
set autowrite

" (bool: default off) enable per-directory .vimrc files
set exrc
" (bool default off) with exrc autocmd shell and write not allowed 
set secure
" (bool default on) use modeline, modelines=# of lines to look
set modeline
set modelines=4

" (bool: default on) timeouts
set timeout
" (bool: default off) timeout on mappings and keycodes
set ttimeout
" (num: default 1000) miliseconds wait to timeout
set timeoutlen=300
set ttimeoutlen=300

" (bool: default on with +writebackup feature, off otherwise)
" Make a backup before overwriting a file
set nowritebackup
 " (bool: default nobackup) make backup before overwriting a file
set nobackup
" (bool: default on) don't use swapfiles
set noswapfile
" (bool: default off) use undo history to file
set undofile
" (num: default 100) number of changes that can be undone
set undolevels=1000
" (num: default 50) set number of : commands 
set history=1000

" (bool: default off) use a visual bell instead of beep
set visualbell
" (bool: default off) use no error bells
set noerrorbells
" (bool: default off) ask instead of fail for certain operations
set confirm

" (str: dark or light) will tell vim to use colors that look good on bg
set background=dark
" (str: default ) allow backspacing over ...
set backspace=indent,eol,start
" (str: default autoselect) make clipboard work normal
set clipboard=unnamed,unnamedplus
" (bool: default off) use arrow keys to navigate
set esckeys
" (str: default '') Enable the use of the mouse a = all
" https://vimhelp.org/options.txt.html#%27mouse%27
set mouse=a

" (number default 1) 0 never / 1 only when 2+ / 2 always
set showtabline=2
" (string: default auto) draw sign column always
set signcolumn=yes
" (num: default 1) show statusline always
set laststatus=2
" (num: default 1) number of lines used for command line
set cmdheight=1
" (bool: default off) highlight line
set cursorline
set cursorlineopt=both
" (str: default: ".,w,b,u,t,i") limit the files searched for auto-completes
" https://vimhelp.org/options.txt.html#%27complete%27
set complete-=i
" (str: default: menu,preview) use menu even with only 1 match
set completeopt=menuone,longest,preview
" (num: default 0) width of fold column (max 12)
set foldcolumn=2
" (str: default "manual") set fold behavior
set foldmethod=indent
" (num: (default: 20) Set max nesting of folds for "indent" and "syntax"
set foldnestmax=3
" (bool: default on) When off, all folds are open
set nofoldenable
" (string default (:),{:},[:] ) 
set matchpairs=(:),{:},[:],<:>
" (num default 5) tenths of a second to show match
set matchtime=2
" (bool: default off) briefly show matching brackets etc.
set showmatch
" (bool default false) use line numbers
set number
set numberwidth=4
" (bool default off) use relative line numbering
set relativenumber
" (num default 0) max items in popup menu
set pumheight=10
" (num default 15) min width of popup menu
set pumwidth=15
" (bool default off) line and column number of cursor
set ruler
" (bool: Vim default on) put a mode message on the last line
set showmode
" (bool: Vim default on) Show (partial) command in the last line of the screen
set showcmd
" (num: default 0) column to show wrap guides
" set colorcolumn=80,120
" (str: default '') always try to show as much of the last line
set display+=lastline
" (bool: default off) hide buffers rathern than abandon
set hidden
" (bool: default off) split windows horizontally
set splitbelow
" (bool: default off) split windows vertically
set splitright

" (bool: default off) smart autoindenting
set smartindent
" (bool: default off) in front of line <TAB> inserts shiftwidth, <BS> deletes shiftwidth
set smarttab
" (number default 0) number of spaces that a tab uses while edting
set softtabstop=2
" (number default 8) number of spaces to use for <TAB>
set tabstop=2
" (bool: default off) copy indent from current line to new line
set autoindent
" (bool: default off) copy structure of existing lines indent when autoindenting
set copyindent
" (bool: default off) wrapped line indented the same as start of line
set breakindent
" (num: default 8) number of spaces to use for each indent
set shiftwidth=2
" (bool: default off) round indent to multiple of shiftwidth
set shiftround
" (bool: default off) replace tabs with spaces
set expandtab
" (bool: default off) wrap lines at 'breakat'
set linebreak
" (bool: default on) wrap lines
set wrap
" (num: default 0) number of characters from right to start wrap
set wrapmargin=2
" (str: default b,s) backspace and space wrap lines
set whichwrap=b,s,<,>,~,[,]
" (num default 0) number of lines to keep below cursor
set scrolloff=5
" (num default 0) number of columns to keep right of cursor
set sidescrolloff=8
" (num default 0) number of columns to scroll horizontally 
set sidescroll=1

" (string vert:|,fold:-,eob:~) set various UI characters
set fillchars=eob:\ 
" (bool: default off) show invisible characters
" set list
" (str: default "eol:$") comma-separated list of string settings for `set list`
set listchars=tab:▸\ 
set listchars+=trail:·
set listchars+=space:·
set listchars+=eol:↴
set listchars+=nbsp:_
" (bool: default on) use one space, not two, after punctuation
set nojoinspaces
" (str: Vim default: "tcq") auto-formatting options
" https://vimhelp.org/change.txt.html#fo-table
" delete comment characters when joining lines
set formatoptions+=j

" (bool: default off) ignore case in search unless using uppercase
set smartcase
" (bool: default off) highlight all search matches
set hlsearch
" (bool: default off) highlight while typing search
set incsearch
" (bool: default off) ignore case in search
set ignorecase
" (num: default 0) set regex engine 0 = automatic selection
set regexpengine=0
" (bool: default on) Changes the special characters that can be used in search patterns
set magic 

" (bool: default off) enhanced command-line completion
set wildmenu
" (str: default full) make completion work normal
set wildmode=list:longest
" (str: default '') change how completion works
set wildoptions=fuzzy,pum
" (str: default '') patterns to ignore when completing
set wildignore=*.o,*.obj,*~,*.pyc
set wildignore+=*vim/backups*
set wildignore+=.git/**
set wildignore+=.node_modules/**
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" -----------------------------------------------------------------------------
" => gui
" -----------------------------------------------------------------------------
" Properly disable sound on errors on MacVim
if has("gui_macvim")
  autocmd GUIEnter * set vb t_vb=
endif

" gui colors if running iTerm
if $TERM_PROGRAM =~ "iTerm.app"
  set termguicolors
  " colorscheme monokai_pro
endif

" Set extra options when running in GUI mode
if has('gui_running')
  " toolbar
    set guioptions-=T
  " tab pages with showtabline
    set guioptions-=e
  " terminal true colors
    set t_Co=256
  " format tab label
    set guitablabel=%M\ %t

endif


" -----------------------------------------------------------------------------
" => plugin settings
" -----------------------------------------------------------------------------
" colors
set termguicolors

let g:tokyonight_style = 'night' " available: night, storm
let g:tokyonight_enable_italic = 1
colorscheme tokyonight

" Ale
let g:ale_linters={'jsx': ['stylelint', 'eslint']}
let g:ale_linter_aliases={'jsx': 'css'}

" EditorConfig
" let g:EditorConfig_exec_path = 'Path to your EditorConfig Core executable'
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

" Git Gutter
let g:gitgutter_sign_column_always = 1
let g:gitgutter_sign_added = '++'
let g:gitgutter_sign_modified = '~~'
let g:gitgutter_sign_removed = '__'
let g:gitgutter_sign_removed_first_line = '¯¯'
let g:gitgutter_sign_modified_removed = '~_'

" Devicons configuration 
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:WebDevIconsNerdTreeAfterGlyphPadding = ''

let g:yankring_history_dir = '$XDG_STATE_HOME/vim/yankring'
let g:yankring_history_file = '.yankring_history'
let g:yankring_replace_n_pkey = '<C-n>'
let g:yankring_replace_n_nkey = '<C-b>'

" FZF Configuration
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~40%' }

" Mapping selecting Mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Undotree
let g:undotree_SplitWidth = 40
let g:undotree_SetFocusWhenToggle = 1
nnoremap <silent> <Leader>u :UndotreeToggle<CR>

" EasyAlign
map <Leader>g :EasyAlign<Space>
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" -----------------------------------------------------------------------------
" keymaps
" -----------------------------------------------------------------------------
" Seamlessly treat visual lines as actual lines when moving around.
noremap j gj
noremap k gk
noremap <Down> gj
noremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" Navigate around splits with a single key combo.
nnoremap <C-l> <C-w><C-l>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-j> <C-w><C-j>

" Cycle through splits.
nnoremap <S-Tab> <C-w>w

" Ctrl-E to switch between 2 last buffers
nmap <C-E> :b#<CR>

" ,n to get the next location (compilation errors, grep etc)
nmap <leader>n :cn<CR>
nmap <leader>N :cp<CR>

" Bash like keys for the command line
cnoremap <C-a> <Home>

" Ctrl-[hl]: Move left/right by word
cnoremap <C-h> <S-Left>
cnoremap <C-l> <S-Right>

" Ctrl-[bf]: I don't use <C-b> to open mini window often
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>

" Ctrl-a: Go to begin of line
inoremap <C-a> <Home>

" Ctrl-e: Go to end of line
inoremap <C-e> <End>

" Edit Vim config file in a new tab.
map <Leader>ev :tabnew $MYVIMRC<CR>

" Source Vim config file.
map <Leader>sv :source $MYVIMRC<CR>

" Move 1 more lines up or down in normal and visual selection modes.
nnoremap <C-k> :m .-2<CR>==
nnoremap <C-j> :m .+1<CR>==
vnoremap <C-k> :m '<-2<CR>gv=gv
vnoremap <C-j> :m '>+1<CR>gv=gv
nnoremap <C-Up> :m .-2<CR>==
nnoremap <C-Down> :m .+1<CR>==
vnoremap <C-Up> :m '<-2<CR>gv=gv
vnoremap <C-Down> :m '>+1<CR>gv=gv

" -----------------------------------------------------------------------------
" => awesome stuff from vimbits.com
" -----------------------------------------------------------------------------
" keep selection after in/outdent
vnoremap < <gv
vnoremap > >gv

" better navigation of wrapped lines
nnoremap j gj
nnoremap k gk

" easier increment/decrement
nnoremap + <C-a>
nnoremap - <C-x>

" remove trailing spaces
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<cr>

" easy split navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>


" -----------------------------------------------------------------------------
" Status line
" -----------------------------------------------------------------------------
" Format the status line
" https://vimhelp.org/options.txt.html#%27statusline%27
" Heavily inspired by: https://github.com/junegunn/dotfiles/blob/master/vimrc
function! s:statusline_expr()
  let mod = "%{&modified ? '[+] ' : !&modifiable ? '[x] ' : ''}"
  let ro  = "%{&readonly ? '[RO] ' : ''}"
  let ft  = "%{len(&filetype) ? '['.&filetype.'] ' : ''}"
  let fug = "%{exists('g:loaded_fugitive') ? fugitive#statusline() : ''}"
  let sep = ' %= '
  let pos = ' %-12(%l : %c%V%) '
  let pct = ' %P'

  return '[%n] %f %<'.mod.ro.ft.fug.sep.pos.'%*'.pct
endfunction

let &statusline = s:statusline_expr()


" -----------------------------------------------------------------------------
" => Strip trailing whitespace (,ss)
" -----------------------------------------------------------------------------
function! StripWhitespace()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction

noremap <leader>ss :call StripWhitespace()<CR>

" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

nmap <leader>w :w!<cr>                 " Fast saving
" :W sudo saves the file
" (useful for handling the permission-denied error)
command! W execute 'w !sudo tee % > /dev/null' <bar> edit!


" -----------------------------------------------------------------------------
" => Automatic commands
" -----------------------------------------------------------------------------
if has("autocmd")
  " Enable file type detection
  filetype on
  " Treat .json files as .js
  autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
  " Treat .md files as Markdown
  autocmd BufNewFile,BufRead *.md setlocal filetype=markdown
endif

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Visually select the text that was last edited/pasted
nnoremap <expr> gV '`[' . strpart(getregtype(), 0, 1) . '`]'

" The fish shell is not very compatible to other shells and unexpectedly
" breaks things that use 'shell'.
if &shell =~# 'fish$'
  set shell=/bin/zsh
endif

" Update a buffer's contents on focus if it changed outside of Vim.
au FocusGained,BufEnter * :checktime

" Unset paste on InsertLeave.
autocmd InsertLeave * silent! set nopaste

" Ensure tabs don't get converted to spaces in Makefiles.
autocmd FileType make setlocal noexpandtab

" Make sure all types of requirements.txt files get syntax highlighting.
autocmd BufNewFile,BufRead requirements*.txt set ft=python

" Make sure .aliases, .bash_aliases and similar files get syntax highlighting.
autocmd BufNewFile,BufRead .*aliases* set ft=sh

" Only show the cursor line in the active buffer.
augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END

" -----------------------------------------------------------------------------
" => Parenthesis/bracket
" -----------------------------------------------------------------------------
vnoremap $1 <esc>`>a)<esc>`<i(<esc>
vnoremap $2 <esc>`>a]<esc>`<i[<esc>
vnoremap $3 <esc>`>a}<esc>`<i{<esc>
vnoremap $$ <esc>`>a"<esc>`<i"<esc>
vnoremap $q <esc>`>a'<esc>`<i'<esc>
vnoremap $e <esc>`>a`<esc>`<i`<esc>

" Map auto complete of (, ", ', [
inoremap $1 ()<esc>i
inoremap $2 []<esc>i
inoremap $3 {}<esc>i
inoremap $4 {<esc>o}<esc>O
inoremap $q ''<esc>i
inoremap $e ""<esc>i

function! CurDir()
    let curdir = substitute(getcwd(), $HOME, "~", "")
    return curdir
endfunction

function! HasPaste()
    if &paste
        return '[PASTE]'
    else
        return ''
    endif
endfunction
